package test

import (
	"os"
	"unsafe"

	"github.com/diamondburned/gotk4-adwaita/pkg/adw"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	"github.com/diamondburned/gotk4/pkg/gtk/v4"
)

func main() {
	// Создаём Libadwaita-приложение (adw.Application)
	app := adw.NewApplication("com.example.AdwExampleApp", gio.ApplicationFlagsNone)

	// Сигнал, вызываемый при активации приложения
	app.ConnectActivate(func() {
		onActivate(app)
	})

	// Запуск приложения
	os.Exit(app.Run(os.Args))
}

// NewAdwApplicationWindow — обёртка, позволяющая передавать *adw.Application
// в adw.NewApplicationWindow, который формально просит *gtk.Application.
func NewAdwApplicationWindow(app *adw.Application) *adw.ApplicationWindow {
	gtkApp := (*gtk.Application)(unsafe.Pointer(app))
	return adw.NewApplicationWindow(gtkApp)
}

func onActivate(app *adw.Application) {
	window := NewAdwApplicationWindow(app)
	window.SetDefaultSize(600, 400)
	window.SetTitle("Libadwaita Пример")

	// Основной контейнер: AdwToolbarView
	toolbarView := adw.NewToolbarView()

	// Верхняя панель (top bar) с заголовком
	header := adw.NewHeaderBar()
	header.SetTitleWidget(gtk.NewLabel("Atomic Installer"))
	toolbarView.AddTopBar(header)

	// Создаём виджет-метку (будет в центре окна)
	label := gtk.NewLabel("Hello from Libadwaita + Go!")
	toolbarView.SetContent(label)

	// Устанавливаем ToolbarView как содержимое окна
	window.SetContent(toolbarView)
	window.SetVisible(true)
}
